from system.core.model import Model
import re
EMAIL_REGEX = re.compile(r'^[a-za-z0-9\.\+_-]+@[a-za-z0-9\._-]+\.[a-za-z]*$')

class User(Model):
    def __init__(self):
        super(User, self).__init__()

    # validation for new users
    def register(self, info):
        errors = []
        if not info['name']:
            errors.append('First Name must be entered')
        elif len(info['name']) < 2:
            errors.append('First Name must be at least two characters')

        if not info['alias']:
            errors.append('First Name must be entered')
        elif len(info['alias']) < 2:
            errors.append('First Name must be at least two characters')

        if not info['email']:
            errors.append('Email must be entered')
        elif not EMAIL_REGEX.match(info['email']):
            errors.append('Invalid Email format')

        if not info['dob']:
            errors.append('Date of Birth must be entered')
        elif len(info['dob']) != 10:
            errors.append('Invalid date format')

        if not info['pw2']:
            errors.append('Password must be entered')

        if not info['pw']:
            errors.append('Password must be entered')
        elif len(info['pw']) < 8:
            errors.append('Password must be at least 8 characters')
        elif info['pw'] != info['pw2']:
            errors.append('Passwords do not match')
        if errors:
            return { 'status' : False, 'errors' : errors }
        else:
            query = "INSERT INTO user (name, alias, email, pw, dob) VALUES (:name, :alias, :email, :pw, :dob)"
            data = { 'name' : info['name'], 'alias' : info['alias'], 'email' : info['email'], 'pw' : self.bcrypt.generate_password_hash(info['pw']), 'dob' : info['dob'] }

        # catches error generated by alias or email already in use
        try:
            uid = self.db.query_db(query, data)
        except Exception as e:
            errors.append('Alias or Email already taken')
            return { 'status' : False, 'errors' : errors }
        # this method of query and data prevents SQL for being easily hacked
        query = "SELECT * FROM user WHERE id = :id"
        data = { 'id' : uid }
        logged = self.db.query_db(query, data)
        return { 'status' : True, 'logged' : logged[0] }

    # validation for login
    def login(self, info):
        errors = []
        if not info['email']:
            errors.append('Email must be entered')
        elif not EMAIL_REGEX.match(info['email']):
            errors.append('Invalid Email format')

        if not info['pw']:
            errors.append('Enter your password')
        elif len(info['pw']) < 8:
            errors.append('Invalid email or password')
        if errors:
            return { 'status' : False, 'errors' : errors }
        else:
            query = "SELECT * FROM user WHERE email = :email"
            data = { 'email' : info['email'] }
            logged = self.db.query_db(query, data)

            if len(logged) < 1 or not self.bcrypt.check_password_hash(logged[0]['pw'], info['pw']):
                return { 'status' : False, 'errors' : 'Invalid email or password' }
            else:
                return { 'status' : True, 'logged' : logged[0] }

    def user(self, id):
        query = "SELECT qb, quote, alias FROM quote JOIN user ON user.id = quote.user_id WHERE user_id = :user_id"
        data = { 'user_id' : id }
        return self.db.query_db(query, data)
